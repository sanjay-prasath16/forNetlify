{"version":3,"file":"lib.modern.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const blob = new Blob(\n  [\n    `\n      const TARGET_SAMPLE_RATE = 16000;\n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\n\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n        }\n        process(inputs, outputs) {\n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let pcm16Array = new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n            \n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\n              }\n            \n              // Send the buffered data to the main script\n              this.port.postMessage([pcm16Array, maxVolume]);\n            \n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create(sampleRate: number): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: { ideal: sampleRate },\n          echoCancellation: { ideal: true },\n          noiseSuppression: { ideal: true },\n        },\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n}\n","const blob = new Blob(\n  [\n    `\n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n\n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(new Int16Array(data.buffer));\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            output[i] = this.currentBuffer[this.cursor] / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\n\nexport class Output {\n  public static async create(sampleRate: number): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.connect(gain);\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", reject);\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const conversationId = conversationConfig.conversation_id;\n      const sampleRate = parseInt(\n        conversationConfig.agent_output_audio_format.replace(\"pcm_\", \"\")\n      );\n\n      return new Connection(socket, conversationId, sampleRate);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly sampleRate: number\n  ) {}\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { Connection, SessionConfig } from \"./utils/connection\";\nimport {\n  ClientToolCallEvent,\n  isValidSocketEvent,\n  PingEvent,\n} from \"./utils/events\";\n\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig } from \"./utils/connection\";\n\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig & Callbacks & ClientToolsConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: () => void;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst DEFAULT_SAMPLE_RATE = 16000;\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n};\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig & Partial<Callbacks> & Partial<ClientToolsConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n\n    try {\n      input = await Input.create(DEFAULT_SAMPLE_RATE);\n      connection = await Connection.create(options);\n      output = await Output.create(connection.sampleRate);\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.socket.addEventListener(\"message\", event => {\n      this.onEvent(event);\n    });\n    this.connection.socket.addEventListener(\"error\", event => {\n      this.updateStatus(\"disconnected\");\n      this.onError(\"Socket error\", event);\n    });\n    this.connection.socket.addEventListener(\"close\", () => {\n      this.updateStatus(\"disconnected\");\n      this.options.onDisconnect();\n    });\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = async () => {\n    if (this.status !== \"connected\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private onEvent = async (event: MessageEvent) => {\n    try {\n      const parsedEvent = JSON.parse(event.data);\n\n      if (!isValidSocketEvent(parsedEvent)) {\n        return;\n      }\n\n      switch (parsedEvent.type) {\n        case \"interruption\": {\n          if (parsedEvent.interruption_event) {\n            this.lastInterruptTimestamp =\n              parsedEvent.interruption_event.event_id;\n          }\n          this.fadeOutAudio();\n          break;\n        }\n\n        case \"agent_response\": {\n          this.options.onMessage({\n            source: \"ai\",\n            message: parsedEvent.agent_response_event.agent_response,\n          });\n          break;\n        }\n\n        case \"user_transcript\": {\n          this.options.onMessage({\n            source: \"user\",\n            message: parsedEvent.user_transcription_event.user_transcript,\n          });\n          break;\n        }\n\n        case \"internal_tentative_agent_response\": {\n          this.options.onDebug({\n            type: \"tentative_agent_response\",\n            response:\n              parsedEvent.tentative_agent_response_internal_event\n                .tentative_agent_response,\n          });\n          break;\n        }\n\n        case \"client_tool_call\": {\n          if (\n            this.options.clientTools.hasOwnProperty(\n              parsedEvent.client_tool_call.tool_name\n            )\n          ) {\n            try {\n              const result = await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters) ?? \"Client tool execution successful.\"; // default client-tool call response\n\n              this.connection.sendMessage({\n                type: \"client_tool_result\",\n                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                result: result,\n                is_error: false,\n              });\n            } catch (e) {\n              this.onError(\n                \"Client tool execution failed with following error: \" +\n                  (e as Error)?.message,\n                {\n                  clientToolName: parsedEvent.client_tool_call.tool_name,\n                }\n              );\n              this.connection.sendMessage({\n                type: \"client_tool_result\",\n                tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n                result: \"Client tool execution failed: \" + (e as Error)?.message,\n                is_error: true,\n              });\n            }\n\n            break;\n          }\n\n          if (this.options.onUnhandledClientToolCall) {\n            this.options.onUnhandledClientToolCall(\n              parsedEvent.client_tool_call\n            );\n\n            break;\n          }\n\n          this.onError(\n            `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            {\n              clientToolName: parsedEvent.client_tool_call.tool_name,\n            }\n          );\n          this.connection.sendMessage({\n            type: \"client_tool_result\",\n            tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n            result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n            is_error: true,\n          });\n\n          break;\n        }\n\n        case \"audio\": {\n          if (\n            this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id!\n          ) {\n            this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n            this.updateMode(\"speaking\");\n          }\n          break;\n        }\n\n        case \"ping\": {\n          this.connection.sendMessage({\n            type: \"pong\",\n            event_id: (parsedEvent as PingEvent).ping_event.event_id,\n          });\n          // parsedEvent.ping_event.ping_ms can be used on client side, for example\n          // to warn if ping is too high that experience might be degraded.\n          break;\n        }\n\n        // unhandled events are expected to be internal events\n        default: {\n          this.options.onDebug(parsedEvent);\n          break;\n        }\n      }\n    } catch {\n      this.onError(\"Failed to parse event data\", { event });\n      return;\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = async (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = async () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n}\n"],"names":["arrayBufferToBase64","b","buffer","Uint8Array","window","btoa","String","fromCharCode","base64ToArrayBuffer","base64","binaryString","atob","len","length","bytes","i","charCodeAt","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","Input","create","sampleRate","context","inputStream","supportsSampleRateConstraint","navigator","mediaDevices","getSupportedConstraints","AudioContext","analyser","createAnalyser","audioWorklet","addModule","getUserMedia","audio","ideal","echoCancellation","noiseSuppression","source","createMediaStreamSource","worklet","AudioWorkletNode","connect","error","_inputStream","_context","getTracks","forEach","track","stop","close","constructor","this","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","config","socket","_config$origin","origin","url","signedUrl","agentId","protocols","authorization","push","WebSocket","conversationConfig","Promise","resolve","reject","addEventListener","_socket","overridesEvent","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","send","JSON","stringify","once","message","parse","data","conversation_initiation_metadata_event","console","warn","conversationId","conversation_id","parseInt","agent_output_audio_format","replace","_socket2","sendMessage","defaultClientTools","clientTools","defaultCallbacks","onConnect","onDebug","onDisconnect","onError","onMessage","onModeChange","onStatusChange","Conversation","startSession","options","fullOptions","_extends","status","input","connection","output","_connection","_input","_output","_this","lastInterruptTimestamp","mode","inputFrequencyData","outputFrequencyData","volume","endSession","async","updateStatus","updateMode","onEvent","parsedEvent","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","hasOwnProperty","client_tool_call","tool_name","_await$_this$options$","result","parameters","tool_call_id","is_error","e","clientToolName","onUnhandledClientToolCall","audio_event","addAudioBase64Chunk","audio_base_64","ping_event","_unused","onInputWorkletMessage","user_audio_chunk","onOutputWorkletMessage","finished","chunk","value","port","postMessage","exponentialRampToValueAtTime","currentTime","setTimeout","calculateVolume","frequencyData","getId","setVolume","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","_this$outputFrequency","getInputVolume","getOutputVolume","onmessage"],"mappings":"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"}