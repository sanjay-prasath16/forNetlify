import{useRef as t,useState as n,useEffect as e}from"react";import{Conversation as r}from"@11labs/client";function u(){return u=Object.assign?Object.assign.bind():function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)({}).hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},u.apply(null,arguments)}function l(l){const a=t(null),o=t(null),[c,s]=n("disconnected"),[i,g]=n("listening");return e(()=>()=>{var t;null==(t=a.current)||t.endSession()},[]),{startSession:async t=>{if(a.current)return a.current.getId();if(o.current)return(await o.current).getId();try{return o.current=r.startSession(u({},null!=l?l:{},null!=t?t:{},{onModeChange:({mode:t})=>{g(t)},onStatusChange:({status:t})=>{s(t)}})),a.current=await o.current,a.current.getId()}finally{o.current=null}},endSession:async()=>{const t=a.current;a.current=null,await(null==t?void 0:t.endSession())},setVolume:({volume:t})=>{var n;null==(n=a.current)||n.setVolume({volume:t})},getInputByteFrequencyData:()=>{var t;return null==(t=a.current)?void 0:t.getInputByteFrequencyData()},getOutputByteFrequencyData:()=>{var t;return null==(t=a.current)?void 0:t.getOutputByteFrequencyData()},getInputVolume:()=>{var t,n;return null!=(t=null==(n=a.current)?void 0:n.getInputVolume())?t:0},getOutputVolume:()=>{var t,n;return null!=(t=null==(n=a.current)?void 0:n.getOutputVolume())?t:0},status:c,isSpeaking:"speaking"===i}}export{l as useConversation};
//# sourceMappingURL=lib.modern.js.map
